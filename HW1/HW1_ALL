{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"HW1_ALL","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyM5IZte5Z2S2TLjBNEahQdc"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"xuUbT0_w_XGk","colab_type":"text"},"source":["#Imports and Data"]},{"cell_type":"code","metadata":{"id":"cZPDtgdo_Mzs","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from tensorflow import keras\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.model_selection import cross_val_score\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import pairwise_distances\n","from scipy.spatial.distance import cosine"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fUo22OEb_att","colab_type":"code","colab":{}},"source":["fashion_mnist = keras.datasets.fashion_mnist\n","(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()\n","\"\"\"\n","0\tT-shirt/top\n","1\tTrouser\n","2\tPullover\n","3\tDress\n","4\tCoat\n","5\tSandal\n","6\tShirt\n","7\tSneaker\n","8\tBag\n","9\tAnkle boot\n","\"\"\"\n","\n","label_names=['T-shirt/top','Trouser','Pullover','Dress','Coat','Sandal',\n","             'Shirt','Sneaker','Bag','Ankle boot']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yZ9Jkucg_e_g","colab_type":"code","colab":{}},"source":["X_train = np.zeros([60000,784]) \n","for i in range(60000): \n","    img=train_images[i,:,:]\n","    X_train[i,:] = img.reshape([784])\n","\n","X_test = np.zeros([10000,784]) \n","for i in range(10000):\n","    img=test_images[i,:,:]\n","    X_test[i,:] = img.reshape([784])\n","\n","X_sub = X_train[:600,:]\n","y_sub = train_labels[:600]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"k5b8javf_hET","colab_type":"text"},"source":["#1"]},{"cell_type":"code","metadata":{"id":"oGbjeUfx_g1N","colab_type":"code","colab":{}},"source":["#cross val\n","\n","cv_acc=[]\n","for k in range(1,13): \n","    model = KNeighborsClassifier(n_neighbors=k)\n","    scores = cross_val_score(model, X_train, train_labels, scoring='accuracy', cv=6)\n","    cv_acc.append(scores.mean())\n","    print('K is',k,'\\n acc is:', scores.mean())\n","\n","#on testing data\n","test_acc=[]\n","for k in range(1,13):\n","    model = KNeighborsClassifier(n_neighbors=k)\n","    model.fit(X_train, train_labels)\n","    y_preds = model.predict(X_test)\n","    score=accuracy_score(y_true=test_labels, y_pred=y_preds)\n","    test_acc.append(score)\n","    print('K is',k,'\\n acc is:', score)\n","\n","#cv_error = 1-np.array(cv_acc)\n","#test_error = 1-np.array(test_acc)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"beWlBc5E_8uE","colab_type":"code","colab":{}},"source":["\"\"\"My Kernel would often crash while doing these, so I recorded these\n","cv_acc = [.8493666666666666, .8468333333333332, .8535333333333334, .8564999999999999,\n","          .85505, .8562166666666667, .8551166666666666, .85595, .8536833333333335,\n","          .8534833333333335,.8524666666666666, .8512]\n","\n","test_acc=[0.8497,0.846,0.8541,0.8577,0.8554,0.8544,\n","          0.854,0.8534,0.8519,0.8515,0.8495,0.8471]\n","\"\"\"\n","\n","cv_error = 1-np.array(cv_acc)\n","test_error = 1-np.array(test_acc)\n","\n","#plots\n","plt.plot(range(1,13), cv_error, '-bs', label='Average CV error')\n","plt.plot(range(1,13), test_error,'-rs', label = 'Test error')\n","plt.legend()\n","plt.xlabel('K')\n","plt.ylabel('Percent Error')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VB7ngjx4AQOu","colab_type":"text"},"source":["#2"]},{"cell_type":"code","metadata":{"id":"FxCR1dDGARpW","colab_type":"code","colab":{}},"source":["#euclid\n","euclid_acc=[]\n","for k in range(1,13):\n","    model = KNeighborsClassifier(n_neighbors=k,metric='euclidean')\n","    model.fit(X_train, train_labels)\n","    y_preds = model.predict(X_test)\n","    score=accuracy_score(y_true=test_labels, y_pred=y_preds)\n","    euclid_acc.append(score)\n","    print('K:',k,'\\n Accuracy:', score)\n","\n","#city-block\n","man_acc=[] #Manhattan dist\n","for k in range(1,13):\n","    model = KNeighborsClassifier(n_neighbors=k, metric='manhattan')\n","    model.fit(X_train, train_labels)\n","    y_preds = model.predict(X_test)\n","    score = accuracy_score(y_true=test_labels, y_pred=y_preds)\n","    man_acc.append(score)\n","    print('K:',k,'\\n Accuracy:', score)\n","\n","#cosine\n","cos_acc=[]\n","for k in range(1,13):\n","    model = KNeighborsClassifier(n_neighbors=k, metric='cosine')\n","    model.fit(X_train, train_labels)\n","    y_preds = model.predict(X_test)\n","    score=accuracy_score(y_true=test_labels, y_pred=y_preds)\n","    cos_acc.append(accuracy_score(y_true=test_labels, y_pred=y_preds))\n","    print('K:',k,'\\n Accuracy:', score)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RV9P7ZAbAXWM","colab_type":"code","colab":{}},"source":["\"\"\"\n","euclid_acc=[0.8497, 0.846, 0.8541, 0.8577, 0.8554, 0.8544,\n","            0.854, 0.8534, 0.8519, 0.8515, 0.8495, 0.8471]\n","\n","man_acc=[0.8526, 0.8523, 0.8575, 0.858, 0.8623, 0.8623, \n","          0.863, 0.8587, 0.8599, 0.8592, 0.8589, 0.8568]\n","\n","cos_acc=[0.8576,0.8541,0.8564,0.859,0.8578,0.858,\n","         0.8559,0.8542,0.8516,0.8529,0.8483,0.8504]\n","\"\"\"\n","euclid_error = 1-np.array(euclid_acc)\n","man_error = 1-np.array(man_acc)\n","cos_error = 1-np.array(cos_acc)\n","\n","plt.plot(range(1,13), euclid_error, '--bs', label='Euclid error')\n","plt.plot(range(1,13), man_error,'--rs', label = 'Manhattan error')\n","plt.plot(range(1,13), cos_error,'--gs', label = 'Cosine error')\n","\n","plt.legend()\n","plt.xlabel('K')\n","plt.ylabel('Percent Error')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MyrQZ5HTAgpy","colab_type":"text"},"source":["#3"]},{"cell_type":"code","metadata":{"id":"dgQS10YwAh-L","colab_type":"code","colab":{}},"source":["#Inverse\n","inv_acc=[]\n","for k in range(1,13):\n","    model = KNeighborsClassifier(n_neighbors=k,weights='distance')\n","    model.fit(X_train, train_labels)\n","    y_preds = model.predict(X_test)\n","    score=accuracy_score(y_true=test_labels, y_pred=y_preds)\n","    inv_acc.append(score)\n","    print('K:',k,'\\n Accuracy:', score)\n","\n","#inverse squared\n","def dist_inv_sq(v):\n","    return 1/(v**2)\n","\n","inv_sq_acc=[]\n","for k in range(1,13):\n","    model = KNeighborsClassifier(n_neighbors=k,weights=dist_inv_sq)\n","    model.fit(X_train, train_labels)\n","    y_preds = model.predict(X_test)\n","    score=accuracy_score(y_true=test_labels, y_pred=y_preds)\n","    inv_sq_acc.append(score)\n","    print('K:',k,'\\n Accuracy:', score)\n","\n","#linear weights\n","def f2(v):\n","    dk=v[-1] #dist to k+1 point\n","    d1=v[0]\n","    w=(dk-v)/(dk-d1)\n","    return w\n","\n","lin_acc=[]\n","for k in range(1,13):\n","    model = KNeighborsClassifier(n_neighbors=k)\n","    model.fit(X_train, train_labels)\n","    y_preds = model.predict(X_test)\n","    score=accuracy_score(y_true=test_labels, y_pred=y_preds)\n","    lin_acc.append(score)\n","    print('K:',k,'\\n Accuracy:', score)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MTvu_d9iBCJM","colab_type":"code","colab":{}},"source":["\"\"\"\n","inv_acc=[0.8497,0.8497,0.8561,0.8597,0.8577,0.8575,\n","         0.8541,0.8554,0.853,0.8538,0.8508,0.8494]\n","inv_sq_acc = [0.8497,0.8497,0.857,0.8603,0.8585,0.8588,\n","              0.8552,0.8565,0.8542,0.8548,0.8521,0.8508]\n","lin_acc=[0.8497,0.846,0.8541,0.8577,0.8554,0.8544,\n","         0.854,0.8534,0.8519,0.8515,0.8495,0.8471]\n","\"\"\"\n","\n","inv_error = 1-np.array(inv_acc)\n","inv_sq_error = 1-np.array(inv_sq_acc)\n","lin_error = 1-np.array(lin_acc)\n","\n","plt.plot(range(1,13), inv_error, '--bs', label='Inverse Weights')\n","plt.plot(range(1,13), inv_sq_error,'--rs', label = 'Inverse Squared Weights')\n","plt.plot(range(1,13), lin_error,'--gs', label = 'Linear Weights')\n","\n","plt.legend()\n","plt.xlabel('K')\n","plt.ylabel('Percent Error')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gmF169yyBLnx","colab_type":"text"},"source":["#4"]},{"cell_type":"code","metadata":{"id":"DPSvOg7fBMya","colab_type":"code","colab":{}},"source":["G0 = X_train[train_labels==0,:]\n","G1 = X_train[train_labels==1,:]\n","G2 = X_train[train_labels==2,:]\n","G3 = X_train[train_labels==3,:]\n","G4 = X_train[train_labels==4,:]\n","G5 = X_train[train_labels==5,:]\n","G6 = X_train[train_labels==6,:]\n","G7 = X_train[train_labels==7,:]\n","G8 = X_train[train_labels==8,:]\n","G9 = X_train[train_labels==9,:]\n","\n","#let k=1\n","#find dist from k to all train points\n","#find clostsest 1 from each group\n","#find centroid\n","#find dist from k to each centroid\n","#find smallest distance\n","#arg min to find prediction\n","\n","#k=2 \n","#find next closest\n","#find centroid\n","#find dist from test point to each centroid\n","#find smallest distance\n","#arg min to find prediction\n","#... repeat for k 3:12\n","\n","#\n","k1_preds=[]\n","k2_preds=[]\n","k3_preds=[]\n","k4_preds=[]\n","k5_preds=[]\n","k6_preds=[]\n","k7_preds=[]\n","k8_preds=[]\n","k9_preds=[]\n","k10_preds=[]\n","k11_preds=[]\n","k12_preds=[]\n","\n","for r in range(X_test.shape[0]): #later replace with X_test.shape[0]\n","\n","    G0_dists, G1_dists, G2_dists, G3_dists, G4_dists = [],[],[],[],[] \n","    G5_dists, G6_dists, G7_dists, G8_dists, G9_dists = [],[],[],[],[]\n","    closest_img_index_G0, closest_img_index_G1, closest_img_index_G2 = [],[],[]\n","    closest_img_index_G3, closest_img_index_G4, closest_img_index_G5= [],[],[]\n","    closest_img_index_G6, closest_img_index_G7, closest_img_index_G8  = [],[],[]\n","    closest_img_index_G9 = []\n","\n","    test_point = X_test[r,:]\n","\n","    #finds all distances, only run once\n","    for i in range(G0.shape[0]):\n","        G0_dists.append( np.sqrt(np.sum((  test_point - G0[i,:]  )**2)) )\n","        G1_dists.append( np.sqrt(np.sum((  test_point - G1[i,:]  )**2)) )\n","        G2_dists.append( np.sqrt(np.sum((  test_point - G2[i,:]  )**2)) )\n","        G3_dists.append( np.sqrt(np.sum((  test_point - G3[i,:]  )**2)) )\n","        G4_dists.append( np.sqrt(np.sum((  test_point - G4[i,:]  )**2)) )\n","        G5_dists.append( np.sqrt(np.sum((  test_point - G5[i,:]  )**2)) )\n","        G6_dists.append( np.sqrt(np.sum((  test_point - G6[i,:]  )**2)) )\n","        G7_dists.append( np.sqrt(np.sum((  test_point - G7[i,:]  )**2)) )\n","        G8_dists.append( np.sqrt(np.sum((  test_point - G8[i,:]  )**2)) )\n","        G9_dists.append( np.sqrt(np.sum((  test_point - G9[i,:]  )**2)) )\n","\n","    #k=1###########################################\n","    #find index of shortest dist\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #find centroid but doesn't matter for k=1\n","    c0 = np.mean(G0[closest_img_index_G0,:],axis=0)\n","    c1 = np.mean(G1[closest_img_index_G1,:],axis=0)\n","    c2 = np.mean(G2[closest_img_index_G2,:],axis=0)\n","    c3 = np.mean(G3[closest_img_index_G3,:],axis=0)\n","    c4 = np.mean(G4[closest_img_index_G4,:],axis=0)\n","    c5 = np.mean(G5[closest_img_index_G5,:],axis=0)\n","    c6 = np.mean(G6[closest_img_index_G6,:],axis=0)\n","    c7 = np.mean(G7[closest_img_index_G7,:],axis=0)\n","    c8 = np.mean(G8[closest_img_index_G8,:],axis=0)\n","    c9 = np.mean(G9[closest_img_index_G9,:],axis=0)\n","\n","\n","    #find dist from test point to each centroid\n","    test_to_centroids_dists = []\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c0)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c1)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c2)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c3)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c4)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c5)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c6)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c7)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c8)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c9)**2) ) )\n","    #actually finds the prediction\n","    k1_preds.append(np.argmin(test_to_centroids_dists))\n","\n","\n","    #k=2##################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #find centroids\n","    c0 = np.mean(G0[closest_img_index_G0,:],axis=0)\n","    c1 = np.mean(G1[closest_img_index_G1,:],axis=0)\n","    c2 = np.mean(G2[closest_img_index_G2,:],axis=0)\n","    c3 = np.mean(G3[closest_img_index_G3,:],axis=0)\n","    c4 = np.mean(G4[closest_img_index_G4,:],axis=0)\n","    c5 = np.mean(G5[closest_img_index_G5,:],axis=0)\n","    c6 = np.mean(G6[closest_img_index_G6,:],axis=0)\n","    c7 = np.mean(G7[closest_img_index_G7,:],axis=0)\n","    c8 = np.mean(G8[closest_img_index_G8,:],axis=0)\n","    c9 = np.mean(G9[closest_img_index_G9,:],axis=0)\n","\n","    #find dist from test point to each centroid\n","    test_to_centroids_dists = []\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c0)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c1)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c2)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c3)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c4)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c5)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c6)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c7)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c8)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c9)**2) ) )\n","\n","    #actually finds the prediction\n","    k2_preds.append(np.argmin(test_to_centroids_dists))\n","\n","    #k=3##########################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #find centroids\n","    c0 = np.mean(G0[closest_img_index_G0,:],axis=0)\n","    c1 = np.mean(G1[closest_img_index_G1,:],axis=0)\n","    c2 = np.mean(G2[closest_img_index_G2,:],axis=0)\n","    c3 = np.mean(G3[closest_img_index_G3,:],axis=0)\n","    c4 = np.mean(G4[closest_img_index_G4,:],axis=0)\n","    c5 = np.mean(G5[closest_img_index_G5,:],axis=0)\n","    c6 = np.mean(G6[closest_img_index_G6,:],axis=0)\n","    c7 = np.mean(G7[closest_img_index_G7,:],axis=0)\n","    c8 = np.mean(G8[closest_img_index_G8,:],axis=0)\n","    c9 = np.mean(G9[closest_img_index_G9,:],axis=0)\n","\n","    #find dist from test point to each centroid\n","    test_to_centroids_dists = []\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c0)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c1)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c2)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c3)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c4)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c5)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c6)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c7)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c8)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c9)**2) ) )\n","\n","    #actually finds the prediction\n","    k3_preds.append(np.argmin(test_to_centroids_dists))\n","\n","    #k=4\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #find centroids\n","    c0 = np.mean(G0[closest_img_index_G0,:],axis=0)\n","    c1 = np.mean(G1[closest_img_index_G1,:],axis=0)\n","    c2 = np.mean(G2[closest_img_index_G2,:],axis=0)\n","    c3 = np.mean(G3[closest_img_index_G3,:],axis=0)\n","    c4 = np.mean(G4[closest_img_index_G4,:],axis=0)\n","    c5 = np.mean(G5[closest_img_index_G5,:],axis=0)\n","    c6 = np.mean(G6[closest_img_index_G6,:],axis=0)\n","    c7 = np.mean(G7[closest_img_index_G7,:],axis=0)\n","    c8 = np.mean(G8[closest_img_index_G8,:],axis=0)\n","    c9 = np.mean(G9[closest_img_index_G9,:],axis=0)\n","\n","    #find dist from test point to each centroid\n","    test_to_centroids_dists = []\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c0)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c1)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c2)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c3)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c4)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c5)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c6)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c7)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c8)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c9)**2) ) )\n","\n","    #actually finds the prediction\n","    k4_preds.append(np.argmin(test_to_centroids_dists))\n","\n","    #k=5#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #find centroids\n","    c0 = np.mean(G0[closest_img_index_G0,:],axis=0)\n","    c1 = np.mean(G1[closest_img_index_G1,:],axis=0)\n","    c2 = np.mean(G2[closest_img_index_G2,:],axis=0)\n","    c3 = np.mean(G3[closest_img_index_G3,:],axis=0)\n","    c4 = np.mean(G4[closest_img_index_G4,:],axis=0)\n","    c5 = np.mean(G5[closest_img_index_G5,:],axis=0)\n","    c6 = np.mean(G6[closest_img_index_G6,:],axis=0)\n","    c7 = np.mean(G7[closest_img_index_G7,:],axis=0)\n","    c8 = np.mean(G8[closest_img_index_G8,:],axis=0)\n","    c9 = np.mean(G9[closest_img_index_G9,:],axis=0)\n","\n","    #find dist from test point to each centroid\n","    test_to_centroids_dists = []\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c0)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c1)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c2)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c3)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c4)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c5)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c6)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c7)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c8)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c9)**2) ) )\n","\n","    #actually finds the prediction\n","    k5_preds.append(np.argmin(test_to_centroids_dists))\n","\n","    #k=6#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #find centroids\n","    c0 = np.mean(G0[closest_img_index_G0,:],axis=0)\n","    c1 = np.mean(G1[closest_img_index_G1,:],axis=0)\n","    c2 = np.mean(G2[closest_img_index_G2,:],axis=0)\n","    c3 = np.mean(G3[closest_img_index_G3,:],axis=0)\n","    c4 = np.mean(G4[closest_img_index_G4,:],axis=0)\n","    c5 = np.mean(G5[closest_img_index_G5,:],axis=0)\n","    c6 = np.mean(G6[closest_img_index_G6,:],axis=0)\n","    c7 = np.mean(G7[closest_img_index_G7,:],axis=0)\n","    c8 = np.mean(G8[closest_img_index_G8,:],axis=0)\n","    c9 = np.mean(G9[closest_img_index_G9,:],axis=0)\n","\n","    #find dist from test point to each centroid\n","    test_to_centroids_dists = []\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c0)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c1)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c2)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c3)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c4)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c5)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c6)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c7)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c8)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c9)**2) ) )\n","\n","    #actually finds the prediction\n","    k6_preds.append(np.argmin(test_to_centroids_dists))\n","\n","    #k=7#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #find centroids\n","    c0 = np.mean(G0[closest_img_index_G0,:],axis=0)\n","    c1 = np.mean(G1[closest_img_index_G1,:],axis=0)\n","    c2 = np.mean(G2[closest_img_index_G2,:],axis=0)\n","    c3 = np.mean(G3[closest_img_index_G3,:],axis=0)\n","    c4 = np.mean(G4[closest_img_index_G4,:],axis=0)\n","    c5 = np.mean(G5[closest_img_index_G5,:],axis=0)\n","    c6 = np.mean(G6[closest_img_index_G6,:],axis=0)\n","    c7 = np.mean(G7[closest_img_index_G7,:],axis=0)\n","    c8 = np.mean(G8[closest_img_index_G8,:],axis=0)\n","    c9 = np.mean(G9[closest_img_index_G9,:],axis=0)\n","\n","    #find dist from test point to each centroid\n","    test_to_centroids_dists = []\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c0)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c1)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c2)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c3)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c4)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c5)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c6)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c7)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c8)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c9)**2) ) )\n","\n","    #actually finds the prediction\n","    k7_preds.append(np.argmin(test_to_centroids_dists))\n","\n","    #k=8#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #find centroids\n","    c0 = np.mean(G0[closest_img_index_G0,:],axis=0)\n","    c1 = np.mean(G1[closest_img_index_G1,:],axis=0)\n","    c2 = np.mean(G2[closest_img_index_G2,:],axis=0)\n","    c3 = np.mean(G3[closest_img_index_G3,:],axis=0)\n","    c4 = np.mean(G4[closest_img_index_G4,:],axis=0)\n","    c5 = np.mean(G5[closest_img_index_G5,:],axis=0)\n","    c6 = np.mean(G6[closest_img_index_G6,:],axis=0)\n","    c7 = np.mean(G7[closest_img_index_G7,:],axis=0)\n","    c8 = np.mean(G8[closest_img_index_G8,:],axis=0)\n","    c9 = np.mean(G9[closest_img_index_G9,:],axis=0)\n","\n","    #find dist from test point to each centroid\n","    test_to_centroids_dists = []\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c0)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c1)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c2)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c3)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c4)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c5)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c6)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c7)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c8)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c9)**2) ) )\n","\n","    #actually finds the prediction\n","    k8_preds.append(np.argmin(test_to_centroids_dists))\n","\n","    #k=9#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #find centroids\n","    c0 = np.mean(G0[closest_img_index_G0,:],axis=0)\n","    c1 = np.mean(G1[closest_img_index_G1,:],axis=0)\n","    c2 = np.mean(G2[closest_img_index_G2,:],axis=0)\n","    c3 = np.mean(G3[closest_img_index_G3,:],axis=0)\n","    c4 = np.mean(G4[closest_img_index_G4,:],axis=0)\n","    c5 = np.mean(G5[closest_img_index_G5,:],axis=0)\n","    c6 = np.mean(G6[closest_img_index_G6,:],axis=0)\n","    c7 = np.mean(G7[closest_img_index_G7,:],axis=0)\n","    c8 = np.mean(G8[closest_img_index_G8,:],axis=0)\n","    c9 = np.mean(G9[closest_img_index_G9,:],axis=0)\n","\n","    #find dist from test point to each centroid\n","    test_to_centroids_dists = []\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c0)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c1)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c2)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c3)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c4)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c5)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c6)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c7)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c8)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c9)**2) ) )\n","\n","    #actually finds the prediction\n","    k9_preds.append(np.argmin(test_to_centroids_dists))\n","\n","    #k=10#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #find centroids\n","    c0 = np.mean(G0[closest_img_index_G0,:],axis=0)\n","    c1 = np.mean(G1[closest_img_index_G1,:],axis=0)\n","    c2 = np.mean(G2[closest_img_index_G2,:],axis=0)\n","    c3 = np.mean(G3[closest_img_index_G3,:],axis=0)\n","    c4 = np.mean(G4[closest_img_index_G4,:],axis=0)\n","    c5 = np.mean(G5[closest_img_index_G5,:],axis=0)\n","    c6 = np.mean(G6[closest_img_index_G6,:],axis=0)\n","    c7 = np.mean(G7[closest_img_index_G7,:],axis=0)\n","    c8 = np.mean(G8[closest_img_index_G8,:],axis=0)\n","    c9 = np.mean(G9[closest_img_index_G9,:],axis=0)\n","\n","    #find dist from test point to each centroid\n","    test_to_centroids_dists = []\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c0)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c1)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c2)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c3)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c4)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c5)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c6)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c7)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c8)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c9)**2) ) )\n","\n","    #actually finds the prediction\n","    k10_preds.append(np.argmin(test_to_centroids_dists))\n","\n","    #k=11#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #find centroids\n","    c0 = np.mean(G0[closest_img_index_G0,:],axis=0)\n","    c1 = np.mean(G1[closest_img_index_G1,:],axis=0)\n","    c2 = np.mean(G2[closest_img_index_G2,:],axis=0)\n","    c3 = np.mean(G3[closest_img_index_G3,:],axis=0)\n","    c4 = np.mean(G4[closest_img_index_G4,:],axis=0)\n","    c5 = np.mean(G5[closest_img_index_G5,:],axis=0)\n","    c6 = np.mean(G6[closest_img_index_G6,:],axis=0)\n","    c7 = np.mean(G7[closest_img_index_G7,:],axis=0)\n","    c8 = np.mean(G8[closest_img_index_G8,:],axis=0)\n","    c9 = np.mean(G9[closest_img_index_G9,:],axis=0)\n","\n","    #find dist from test point to each centroid\n","    test_to_centroids_dists = []\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c0)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c1)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c2)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c3)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c4)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c5)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c6)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c7)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c8)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c9)**2) ) )\n","\n","    #actually finds the prediction\n","    k11_preds.append(np.argmin(test_to_centroids_dists))\n","\n","    #k=12#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #find centroids\n","    c0 = np.mean(G0[closest_img_index_G0,:],axis=0)\n","    c1 = np.mean(G1[closest_img_index_G1,:],axis=0)\n","    c2 = np.mean(G2[closest_img_index_G2,:],axis=0)\n","    c3 = np.mean(G3[closest_img_index_G3,:],axis=0)\n","    c4 = np.mean(G4[closest_img_index_G4,:],axis=0)\n","    c5 = np.mean(G5[closest_img_index_G5,:],axis=0)\n","    c6 = np.mean(G6[closest_img_index_G6,:],axis=0)\n","    c7 = np.mean(G7[closest_img_index_G7,:],axis=0)\n","    c8 = np.mean(G8[closest_img_index_G8,:],axis=0)\n","    c9 = np.mean(G9[closest_img_index_G9,:],axis=0)\n","\n","    #find dist from test point to each centroid\n","    test_to_centroids_dists = []\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c0)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c1)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c2)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c3)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c4)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c5)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c6)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c7)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c8)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c9)**2) ) )\n","\n","    #actually finds the prediction\n","    k12_preds.append(np.argmin(test_to_centroids_dists))\n","\n","scorek1=accuracy_score(y_true=test_labels, y_pred=k1_preds)\n","scorek2=accuracy_score(y_true=test_labels, y_pred=k2_preds)\n","scorek3=accuracy_score(y_true=test_labels, y_pred=k3_preds)\n","scorek4=accuracy_score(y_true=test_labels, y_pred=k4_preds)\n","scorek5=accuracy_score(y_true=test_labels, y_pred=k5_preds)\n","scorek6=accuracy_score(y_true=test_labels, y_pred=k6_preds)\n","scorek7=accuracy_score(y_true=test_labels, y_pred=k7_preds)\n","scorek8=accuracy_score(y_true=test_labels, y_pred=k8_preds)\n","scorek9=accuracy_score(y_true=test_labels, y_pred=k9_preds)\n","scorek10=accuracy_score(y_true=test_labels, y_pred=k10_preds)\n","scorek11=accuracy_score(y_true=test_labels, y_pred=k11_preds)\n","scorek12=accuracy_score(y_true=test_labels, y_pred=k12_preds)\n","\n","\"\"\"\n","NLC_acc=[0.8497,0.8668,0.8715,0.8784,0.8791,0.8816,\n","         0.8834,0.8836,0.8855,0.8867,0.885,0.8851]\n","\"\"\"\n","\n","np.argmax(NLC_acc) #9 is the best\n","\n","NLC_error = 1-np.array(NLC_acc)\n","\n","\n","plt.plot(range(1,13), NLC_error,'-rs', label = 'NLC error')\n","plt.legend()\n","plt.xlabel('K')\n","plt.ylabel('Percent Error')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"c1beQF0Jso2F","colab_type":"code","colab":{}},"source":["#let k=1\n","#find dist from k to all train points\n","#find clostsest 1 from each group\n","#find centroid\n","#find dist from k to each centroid\n","#find smallest distance\n","#arg min to find prediction\n","\n","#k=2 \n","#find next closest\n","#find centroid\n","#find dist from test point to each centroid\n","\n","#\n","k1_preds=[]\n","k2_preds=[]\n","k3_preds=[]\n","k4_preds=[]\n","k5_preds=[]\n","k6_preds=[]\n","k7_preds=[]\n","k8_preds=[]\n","k9_preds=[]\n","k10_preds=[]\n","k11_preds=[]\n","k12_preds=[]\n","\n","for r in range(X_test.shape[0]): \n","\n","    G0_dists, G1_dists, G2_dists, G3_dists, G4_dists = [],[],[],[],[] \n","    G5_dists, G6_dists, G7_dists, G8_dists, G9_dists = [],[],[],[],[]\n","    closest_img_index_G0, closest_img_index_G1, closest_img_index_G2 = [],[],[]\n","    closest_img_index_G3, closest_img_index_G4, closest_img_index_G5= [],[],[]\n","    closest_img_index_G6, closest_img_index_G7, closest_img_index_G8  = [],[],[]\n","    closest_img_index_G9 = []\n","\n","    test_point = X_test[r,:]\n","\n","    #finds all distances, only run once\n","    for i in range(G0.shape[0]):\n","        G0_dists.append( np.sqrt(np.sum((  test_point - G0[i,:]  )**2)) )\n","        G1_dists.append( np.sqrt(np.sum((  test_point - G1[i,:]  )**2)) )\n","        G2_dists.append( np.sqrt(np.sum((  test_point - G2[i,:]  )**2)) )\n","        G3_dists.append( np.sqrt(np.sum((  test_point - G3[i,:]  )**2)) )\n","        G4_dists.append( np.sqrt(np.sum((  test_point - G4[i,:]  )**2)) )\n","        G5_dists.append( np.sqrt(np.sum((  test_point - G5[i,:]  )**2)) )\n","        G6_dists.append( np.sqrt(np.sum((  test_point - G6[i,:]  )**2)) )\n","        G7_dists.append( np.sqrt(np.sum((  test_point - G7[i,:]  )**2)) )\n","        G8_dists.append( np.sqrt(np.sum((  test_point - G8[i,:]  )**2)) )\n","        G9_dists.append( np.sqrt(np.sum((  test_point - G9[i,:]  )**2)) )\n","\n","    #k=1###########################################\n","    #find index of shortest dist\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #k=2##################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","    #k=3##########################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","\n","    #k=4\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #k=5#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #k=6#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #k=7#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #k=8#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #k=9#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","\n","    #k=10#################################################\n","    #find next index\n","    i0=np.argmin(G0_dists)\n","    i1=np.argmin(G1_dists)\n","    i2=np.argmin(G2_dists)\n","    i3=np.argmin(G3_dists)\n","    i4=np.argmin(G4_dists)\n","    i5=np.argmin(G5_dists)\n","    i6=np.argmin(G6_dists)\n","    i7=np.argmin(G7_dists)\n","    i8=np.argmin(G8_dists)\n","    i9=np.argmin(G9_dists)\n","\n","    closest_img_index_G0.append(i0)\n","    closest_img_index_G1.append(i1)\n","    closest_img_index_G2.append(i2)\n","    closest_img_index_G3.append(i3)\n","    closest_img_index_G4.append(i4)\n","    closest_img_index_G5.append(i5)\n","    closest_img_index_G6.append(i6)\n","    closest_img_index_G7.append(i7)\n","    closest_img_index_G8.append(i8)\n","    closest_img_index_G9.append(i9)\n","    #set that dist to inf so it's not found on next loop\n","    G0_dists[i0] = np.Inf\n","    G1_dists[i1] = np.Inf\n","    G2_dists[i2] = np.Inf\n","    G3_dists[i3] = np.Inf\n","    G4_dists[i4] = np.Inf\n","    G5_dists[i5] = np.Inf\n","    G6_dists[i6] = np.Inf\n","    G7_dists[i7] = np.Inf\n","    G8_dists[i8] = np.Inf\n","    G9_dists[i9] = np.Inf\n","\n","    #find centroids\n","    c0 = np.mean(G0[closest_img_index_G0,:],axis=0)\n","    c1 = np.mean(G1[closest_img_index_G1,:],axis=0)\n","    c2 = np.mean(G2[closest_img_index_G2,:],axis=0)\n","    c3 = np.mean(G3[closest_img_index_G3,:],axis=0)\n","    c4 = np.mean(G4[closest_img_index_G4,:],axis=0)\n","    c5 = np.mean(G5[closest_img_index_G5,:],axis=0)\n","    c6 = np.mean(G6[closest_img_index_G6,:],axis=0)\n","    c7 = np.mean(G7[closest_img_index_G7,:],axis=0)\n","    c8 = np.mean(G8[closest_img_index_G8,:],axis=0)\n","    c9 = np.mean(G9[closest_img_index_G9,:],axis=0)\n","\n","    #find dist from test point to each centroid\n","    test_to_centroids_dists = []\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c0)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c1)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c2)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c3)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c4)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c5)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c6)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c7)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c8)**2) ) )\n","    test_to_centroids_dists.append(np.sqrt( np.sum( (test_point - c9)**2) ) )\n","\n","    #actually finds the prediction\n","    k10_preds.append(np.argmin(test_to_centroids_dists))\n","\n","\n","from sklearn.metrics import confusion_matrix\n","\n","print(confusion_matrix(test_labels, k10_preds, labels=[0,1,2,3,4,5,6,7,8,9]))\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NdvQQdP5s9ia","colab_type":"code","colab":{}},"source":["\"\"\" for k=10\n","[[830   1  12  23   4   2 120   0   8   0]\n"," [  1 977   0  16   2   0   3   0   1   0]\n"," [ 21   1 821   9  85   0  63   0   0   0]\n"," [ 25   4  15 896  35   0  23   0   2   0]\n"," [  1   0 108  30 811   0  47   0   3   0]\n"," [  0   0   0   0   0 959   0  20   0  21]\n"," [124   1  97  24  84   0 663   0   7   0]\n"," [  0   0   0   0   0  16   0 960   0  24]\n"," [  2   0   1   4   3   2   6   5 977   0]\n"," [  0   0   0   0   0   6   0  20   1 973]]\n"," \"\"\""],"execution_count":null,"outputs":[]}]}